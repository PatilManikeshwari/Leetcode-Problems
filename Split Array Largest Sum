Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.


Solution--

class Solution:
    def splitArray(self, nums: List[int], k: int) -> int:
        l, r = max(nums), sum(nums)
        n = len(nums)
        if n == k:
            return l

        ans = 0
        while l <= r:
            m = (l + r) // 2
            temp_sum = 0
            cnt = 0
            for num in nums:
                if temp_sum + num <= m:
                    temp_sum += num
                else:
                    cnt += 1
                    temp_sum = num
            cnt += 1

            if cnt <= k:
                ans = m
                r = m - 1
            else:
                l = m + 1

        return ans
