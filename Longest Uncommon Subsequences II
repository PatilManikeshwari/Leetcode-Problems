Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.

For example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". Other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
 

Example 1:

Input: strs = ["aba","cdc","eae"]
Output: 3
Example 2:

Input: strs = ["aaa","aaa","aa"]
Output: -1

Solution--

class Solution:
    def findLUSlength(self, strs: List[str]) -> int:
        group = defaultdict(lambda: defaultdict(int))

        for str in strs:
            group[len(str)][str] += 1

        max_len = max(group.keys())

        while max_len > 0:
            for key, val in group[max_len].items():
                if val == 1:
                    return max_len

                for i in range(max_len):
                    group[max_len - 1][key[:i] + key[i + 1 :]] += val

            max_len -= 1

        return -1
