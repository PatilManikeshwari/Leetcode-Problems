Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.

The closest is defined as the absolute difference minimized between two integers.

 

Example 1:

Input: n = "123"
Output: "121"
Example 2:

Input: n = "1"
Output: "0"
Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.

Solution--

class Solution:
    def nearestPalindromic(self, n: str) -> str:
        length = len(n)
        num = int(n)
        cands = {str(10**(length-1)-1), str(10**length+1)}
        prefixLen = (length+1)//2
        prefix = int(n[:prefixLen])
        for delta in (-1,0,1):
            pref = str(prefix + delta)
            if len(pref) > 0:
                if length%2:
                    cand = pref + pref[:-1][::-1]
                else:
                    cand = pref + pref[::-1]
                cands.add(cand)
        cands.discard(n)
        best = None
        for cand in cands:
            val = int(cand)
            diff = abs(val - num)
            if best is None or diff < best[0] or diff == best[0] and val < best[1]:
                best = (diff, val)
        return str(best[1])
        
