Given an integer n represented as a string, return the smallest good base of n.

We call k >= 2 a good base of n, if all digits of n base k are 1's.

 

Example 1:

Input: n = "13"
Output: "3"
Explanation: 13 base 3 is 111.
Example 2:

Input: n = "4681"
Output: "8"
Explanation: 4681 base 8 is 11111.
Example 3:

Input: n = "1000000000000000000"
Output: "999999999999999999"
Explanation: 1000000000000000000 base 999999999999999999 is 11.

Solution--

from math import log

class Solution:
    def smallestGoodBase(self, n: str) -> str:
        n = int(n)
        for m in range(int(log(n,2))+1, 1, -1):
            low = 2 
            high = int(n**(1/(m-1)))+1
            while low <= high:
                mid = (low+high)//2
                s, curr = 1, 1
                for _ in range(1,m):
                    curr *= mid
                    s += curr
                    if s > n:
                        break
                if s == n:
                    return str(mid)
                if s < n:
                    low = mid + 1
                else:
                    high = mid - 1
        return str(n-1)
